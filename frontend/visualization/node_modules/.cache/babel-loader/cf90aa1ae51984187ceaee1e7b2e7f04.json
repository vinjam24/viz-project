{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/MdsVariable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport '../css/ScatterPlot.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MdsVariable = props => {\n  _s();\n\n  let scatterRef = useRef(null);\n  const [state, setState] = useState();\n  let data = props.data;\n  let width = 1000;\n  let height = 500;\n  const margin_left = 100;\n  const margin_right = 30;\n  const margin_top = 20;\n  const margin_bottom = 100;\n  const effective_width = width - margin_left - margin_right;\n  const effective_height = height - margin_top - margin_bottom;\n  let xData;\n  let yData;\n  let color;\n  const colormap = [\"red\", \"blue\", \"black\", \"green\"];\n  var key_array_for_pcp = [];\n  useEffect(() => {\n    axios.get('http://localhost:8000/mds_variable').then(repos => {\n      const allRepos = repos.data;\n      let parsedResponse = JSON.parse(allRepos);\n      let tempState = {\n        'first': parsedResponse['first'],\n        'second': parsedResponse['second'],\n        'name': parsedResponse['name']\n      };\n      setState(tempState);\n      clearBoard();\n      draw();\n    });\n    clearBoard();\n  }, []);\n  useEffect(() => {\n    clearBoard();\n    draw();\n  }, [state]);\n\n  const clearBoard = () => {\n    const accessToRef = d3.select(scatterRef.current);\n    accessToRef.selectAll(\"svg > *\").remove();\n  };\n\n  const draw = () => {\n    if (state != undefined) {\n      xData = state.first;\n      yData = state.second;\n    }\n\n    if (xData != undefined && yData != undefined) {\n      const accessToRef = d3.select(scatterRef.current).attr(\"height\", height).attr(\"width\", width).style(\"background-color\", \"#f5f5f5\").append(\"g\").attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n      var xAxis = d3.scaleLinear().domain([d3.min(Object.keys(xData), function (d) {\n        return 1.2 * xData[d];\n      }), d3.max(Object.keys(xData), function (d) {\n        return 1.2 * xData[d];\n      })]).range([0, effective_width]);\n      accessToRef.append(\"g\").attr(\"transform\", \"translate(0,\" + effective_height + \")\").call(d3.axisBottom(xAxis)).call(g => g.append(\"text\").style(\"font-size\", \"18px\").attr(\"x\", effective_width / 2).attr(\"y\", -margin_top + 80).attr(\"fill\", \"blue\").attr(\"text-anchor\", \"start\").text(\"Component 1\"));\n      var yAxis = d3.scaleLinear().domain([d3.min(Object.keys(yData), function (d) {\n        return 1.2 * yData[d];\n      }), d3.max(Object.keys(yData), function (d) {\n        return 1.2 * yData[d];\n      })]).range([effective_height, 0]);\n      accessToRef.append(\"g\").call(d3.axisLeft(yAxis)).call(g => g.append(\"text\").style(\"font-size\", \"18px\").attr(\"x\", -effective_height / 2 + 100).attr(\"y\", -margin_left + 20).attr(\"fill\", \"red\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"rotate(-90)\").text(\"Component 2\"));\n      let gNode = accessToRef.append('g');\n      gNode.selectAll(\"dot\").data(Object.keys(xData)).enter().append(\"circle\").attr(\"cx\", function (d) {\n        return xAxis(xData[d]);\n      }).attr(\"cy\", function (d) {\n        return yAxis(yData[d]);\n      }).attr(\"r\", 5).style(\"fill\", function (d) {\n        return \"red\";\n      }).on('click', function (d, i) {\n        d3.select(this).transition().duration('50').style(\"fill\", \"blue\");\n        key_array_for_pcp.push(state.name[d]);\n        props.updateStatePCP(key_array_for_pcp);\n      });\n      gNode.selectAll(\"text\").data(Object.keys(state.name)).enter().append(\"text\").style(\"font-size\", \"10px\").attr(\"x\", function (d) {\n        return xAxis(xData[d]) + 10;\n      }).attr(\"y\", function (d) {\n        return yAxis(yData[d]) + 4;\n      }).attr(\"fill\", \"black\").text(function (d) {\n        return state.name[d];\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 18\n    }, this), state ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"MDS Variable's Plot using  (1-|correlation|) distance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Click on Points for selecting Axis for Parallel Coordinates Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: scatterRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 56\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MdsVariable, \"QDCkeTSm8cO1sLbZ1vFeulP+Twg=\");\n\n_c = MdsVariable;\nexport default MdsVariable;\n\nvar _c;\n\n$RefreshReg$(_c, \"MdsVariable\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/MdsVariable.js"],"names":["React","useEffect","useRef","useState","d3","axios","MdsVariable","props","scatterRef","state","setState","data","width","height","margin_left","margin_right","margin_top","margin_bottom","effective_width","effective_height","xData","yData","color","colormap","key_array_for_pcp","get","then","repos","allRepos","parsedResponse","JSON","parse","tempState","clearBoard","draw","accessToRef","select","current","selectAll","remove","undefined","first","second","attr","style","append","xAxis","scaleLinear","domain","min","Object","keys","d","max","range","call","axisBottom","g","text","yAxis","axisLeft","gNode","enter","on","i","transition","duration","push","name","updateStatePCP"],"mappings":"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","sourcesContent":["import React,{useEffect,useRef,useState} from 'react';\nimport * as d3 from 'd3';\nimport '../css/ScatterPlot.css';\nimport axios from 'axios';\n\n const MdsVariable = (props) => {\n\n    let scatterRef = useRef(null);\n    const [state, setState] = useState();\n    let data= props.data;\n    let width = 1000;\n    let height = 500;\n    const margin_left=100;\n    const margin_right=30;\n    const margin_top=20;\n    const margin_bottom=100;\n    const effective_width= width - margin_left - margin_right;\n    const effective_height= height - margin_top - margin_bottom;\n    let xData ; \n    let yData ; \n    let color ; \n    const colormap=[\"red\",\"blue\",\"black\",\"green\"];\n    var key_array_for_pcp=[];\n    useEffect(()=>{\n        axios.get('http://localhost:8000/mds_variable').then((repos) => {\n            const allRepos = repos.data;\n            let parsedResponse = JSON.parse(allRepos);\n            let tempState = {'first':parsedResponse['first'],'second':parsedResponse['second'],'name':parsedResponse['name']};\n            setState(tempState);\n            clearBoard();\n            draw();\n      });\n        clearBoard();\n    },[]);\n\n    useEffect(()=>{\n        clearBoard();\n        draw();\n    },[state])\n\n    const clearBoard=()=>{\n        const accessToRef = d3.select(scatterRef.current)\n        accessToRef.selectAll(\"svg > *\").remove();\n    }\n\n    const draw =() =>{\n        if(state!=undefined)\n        {\n            xData = state.first;\n            yData = state.second;\n        }\n        if(xData!=undefined && yData!=undefined)\n        {\n            const accessToRef = d3.select(scatterRef.current)\n                                    .attr(\"height\",height)\n                                    .attr(\"width\",width)\n                                    .style(\"background-color\",\"#f5f5f5\")\n                                    .append(\"g\")\n                                    .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n\n            var xAxis= d3.scaleLinear()\n                        .domain([d3.min(Object.keys(xData), function(d) { return 1.2*xData[d] }), d3.max(Object.keys(xData), function(d) { return 1.2*xData[d] })])\n                        .range([ 0, effective_width ]);\n            \n            accessToRef.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + effective_height + \")\")\n                    .call(d3.axisBottom(xAxis))\n                    .call(g => g.append(\"text\")\n                        .style(\"font-size\", \"18px\")\n                        .attr(\"x\", effective_width/2)\n                        .attr(\"y\", -margin_top+80)\n                        .attr(\"fill\", \"blue\")\n                        .attr(\"text-anchor\", \"start\")\n                        .text(\"Component 1\"));\n            \n            var yAxis = d3.scaleLinear()\n                    .domain([d3.min(Object.keys(yData), function(d) { return 1.2*yData[d] }), d3.max(Object.keys(yData), function(d) { return 1.2*yData[d] })])\n                    .range([ effective_height, 0]);\n\n            accessToRef.append(\"g\")\n                .call(d3.axisLeft(yAxis))\n                .call(g => g.append(\"text\")\n                    .style(\"font-size\", \"18px\")\n                    .attr(\"x\", -effective_height/2+100)\n                    .attr(\"y\", -margin_left+20)\n                    .attr(\"fill\", \"red\")\n                    .attr(\"text-anchor\", \"end\")\n                    .attr(\"transform\", \"rotate(-90)\")\n                    .text(\"Component 2\"));\n            \n            let gNode = accessToRef.append('g');\n\n                gNode.selectAll(\"dot\")\n                .data(Object.keys(xData))\n                .enter()\n                    .append(\"circle\")\n                    .attr(\"cx\", function (d) { return xAxis(xData[d])  })\n                    .attr(\"cy\", function (d) { return yAxis(yData[d]) } )\n                    .attr(\"r\", 5)\n                    .style(\"fill\", function (d) { return \"red\"})\n                    .on('click', function (d, i) {\n                        d3.select(this)\n                             .transition()\n                             .duration('50')\n                             .style(\"fill\",\"blue\");\n                        key_array_for_pcp.push(state.name[d]);\n                        props.updateStatePCP(key_array_for_pcp);\n                    });\n\n                \n                gNode.selectAll(\"text\")\n                    .data(Object.keys(state.name))\n                    .enter()\n                    .append(\"text\")\n                    .style(\"font-size\", \"10px\")\n                    .attr(\"x\", function (d) { return xAxis(xData[d])+10})\n                    .attr(\"y\", function (d) { return yAxis(yData[d])+4 })\n                    .attr(\"fill\", \"black\")\n                    .text(function(d){return state.name[d]});\n        }\n}\n    return(\n        <div>\n            <br/><br/>\n            {\n              state ? <div>\n                  <h3><u>MDS Variable's Plot using  (1-|correlation|) distance</u></h3>\n                  <div>Click on Points for selecting Axis for Parallel Coordinates Plot</div>\n                  <svg ref={scatterRef}></svg></div> : <div />\n            }\n        </div>\n    );\n\n};\nexport default MdsVariable;\n\n\n"]},"metadata":{},"sourceType":"module"}