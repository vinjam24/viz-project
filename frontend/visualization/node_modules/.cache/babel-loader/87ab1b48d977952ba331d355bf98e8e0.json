{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js\",\n    _s = $RefreshSig$();\n\nimport { geoMercator, geoPath, max } from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\nimport { select, scaleLinear } from \"d3\"; // import useResizeObserver from \"./useResizeObserver\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart({\n  data,\n  property,\n  csvdata\n}) {\n  _s();\n\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  console.log(\"data\", data.features[0]);\n  useEffect(() => {\n    // const accessToRef = select(svgRef.current);\n    const width = 800;\n    const height = 550;\n    var min = 100000;\n    var max = -100000;\n\n    for (var i = 0; i < csvdata.expectancy.length; i++) {\n      if (csvdata.expectancy[i] < min) {\n        min = csvdata.expectancy[i];\n      }\n\n      if (csvdata.expectancy[i] > min) {\n        max = csvdata.expectancy[i];\n      }\n    }\n\n    var colorScale = scaleLinear().domain([min, max]).range(['#ccc', 'blue']);\n    const projection = geoMercator().fitSize([width, height], data);\n    const pathGenerator = geoPath().projection(projection); // accessToRef.selectAll(\".country\")\n    // .data(data.features)\n    // .append(\"path\")\n    // .attr(\"class\", \"country\")\n    // .attr(\"d\", feature => pathGenerator(feature));\n\n    const accessToRef = select(svgRef.current).attr(\"height\", height).attr(\"width\", width).style(\"background-color\", \"red\"); // .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n\n    accessToRef.selectAll(\".country\").data(data.features).enter().append('path').attr('class', 'country').attr('d', feature => {\n      return pathGenerator(feature);\n    }).attr(\"fill\");\n  }, [data, property]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoChart, \"wHGsJvYloKVvWo8EGgYwue3juQs=\");\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js"],"names":["geoMercator","geoPath","max","React","useEffect","useRef","select","scaleLinear","GeoChart","data","property","csvdata","svgRef","wrapperRef","console","log","features","width","height","min","i","expectancy","length","colorScale","domain","range","projection","fitSize","pathGenerator","accessToRef","current","attr","style","selectAll","enter","append","feature","marginBottom"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,GAA/B,QAA0C,IAA1C;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAAQC,MAAR,EAAeC,WAAf,QAAiC,IAAjC,C,CAEA;;;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA,IAAD;AAAMC,EAAAA,QAAN;AAAeC,EAAAA;AAAf,CAAlB,EAA0C;AAAA;;AAGtC,QAAMC,MAAM,GAAGP,MAAM,CAAC,IAAD,CAArB;AACA,QAAMQ,UAAU,GAAGR,MAAM,EAAzB;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBN,IAAI,CAACO,QAAL,CAAc,CAAd,CAAnB;AAEAZ,EAAAA,SAAS,CAAC,MAAI;AAEV;AACA,UAAMa,KAAK,GAAC,GAAZ;AACA,UAAMC,MAAM,GAAG,GAAf;AAEA,QAAIC,GAAG,GAAC,MAAR;AACA,QAAIjB,GAAG,GAAG,CAAC,MAAX;;AAEA,SAAI,IAAIkB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACT,OAAO,CAACU,UAAR,CAAmBC,MAAjC,EAAwCF,CAAC,EAAzC,EAA4C;AACxC,UAAGT,OAAO,CAACU,UAAR,CAAmBD,CAAnB,IAAsBD,GAAzB,EAA6B;AACzBA,QAAAA,GAAG,GAAGR,OAAO,CAACU,UAAR,CAAmBD,CAAnB,CAAN;AACH;;AACD,UAAGT,OAAO,CAACU,UAAR,CAAmBD,CAAnB,IAAsBD,GAAzB,EAA6B;AACzBjB,QAAAA,GAAG,GAAGS,OAAO,CAACU,UAAR,CAAmBD,CAAnB,CAAN;AACH;AACJ;;AAEF,QAAIG,UAAU,GAAGhB,WAAW,GAAGiB,MAAd,CAAqB,CAACL,GAAD,EAAKjB,GAAL,CAArB,EAAgCuB,KAAhC,CAAsC,CAAC,MAAD,EAAQ,MAAR,CAAtC,CAAjB;AAEC,UAAMC,UAAU,GAAG1B,WAAW,GAAG2B,OAAd,CAAsB,CAACV,KAAD,EAAOC,MAAP,CAAtB,EAAqCT,IAArC,CAAnB;AAEA,UAAMmB,aAAa,GAAG3B,OAAO,GAAGyB,UAAV,CAAqBA,UAArB,CAAtB,CAtBU,CAwBV;AACA;AACA;AACA;AACA;;AACA,UAAMG,WAAW,GAAGvB,MAAM,CAACM,MAAM,CAACkB,OAAR,CAAN,CACSC,IADT,CACc,QADd,EACuBb,MADvB,EAESa,IAFT,CAEc,OAFd,EAEsBd,KAFtB,EAGSe,KAHT,CAGe,kBAHf,EAGkC,KAHlC,CAApB,CA7BU,CAiCkB;;AAC5BH,IAAAA,WAAW,CAACI,SAAZ,CAAsB,UAAtB,EACaxB,IADb,CACkBA,IAAI,CAACO,QADvB,EAEakB,KAFb,GAGiBC,MAHjB,CAGwB,MAHxB,EAIiBJ,IAJjB,CAIsB,OAJtB,EAI8B,SAJ9B,EAKiBA,IALjB,CAKsB,GALtB,EAK2BK,OAAO,IAAG;AACjB,aAAOR,aAAa,CAACQ,OAAD,CAApB;AACH,KAPjB,EAQiBL,IARjB,CAQsB,MARtB;AAWH,GA7CQ,EA6CP,CAACtB,IAAD,EAAMC,QAAN,CA7CO,CAAT;AAgDA,sBACI;AAAK,IAAA,GAAG,EAAEG,UAAV;AAAsB,IAAA,KAAK,EAAE;AAAEwB,MAAAA,YAAY,EAAE;AAAhB,KAA7B;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEzB;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA9DQJ,Q;;KAAAA,Q;AAiET,eAAeA,QAAf","sourcesContent":["import { geoMercator, geoPath, max } from \"d3\";\nimport React,{ useEffect, useRef } from \"react\";\nimport {select,scaleLinear} from \"d3\";\n\n// import useResizeObserver from \"./useResizeObserver\";\n\nfunction GeoChart({data,property,csvdata}){\n    \n    \n    const svgRef = useRef(null);\n    const wrapperRef = useRef();\n\n    console.log(\"data\",data.features[0])\n\n    useEffect(()=>{\n    \n        // const accessToRef = select(svgRef.current);\n        const width=800;\n        const height = 550;\n\n        var min=100000\n        var max = -100000\n        \n        for(var i=0;i<csvdata.expectancy.length;i++){\n            if(csvdata.expectancy[i]<min){\n                min = csvdata.expectancy[i];\n            }\n            if(csvdata.expectancy[i]>min){\n                max = csvdata.expectancy[i];\n            }\n        }\n\n       var colorScale = scaleLinear().domain([min,max]).range(['#ccc','blue'])\n\n        const projection = geoMercator().fitSize([width,height],data);\n\n        const pathGenerator = geoPath().projection(projection);\n\n        // accessToRef.selectAll(\".country\")\n        // .data(data.features)\n        // .append(\"path\")\n        // .attr(\"class\", \"country\")\n        // .attr(\"d\", feature => pathGenerator(feature));\n        const accessToRef = select(svgRef.current)\n                                    .attr(\"height\",height)\n                                    .attr(\"width\",width)\n                                    .style(\"background-color\",\"red\")\n                                    // .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n        accessToRef.selectAll(\".country\")\n                    .data(data.features)\n                    .enter()\n                        .append('path')\n                        .attr('class','country')\n                        .attr('d', feature=> {\n                            return pathGenerator(feature)\n                        })\n                        .attr(\"fill\",)\n                    \n\n    },[data,property])\n\n\n    return (\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n          <svg ref={svgRef}></svg>\n        </div>\n      );\n\n}\n\n\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}