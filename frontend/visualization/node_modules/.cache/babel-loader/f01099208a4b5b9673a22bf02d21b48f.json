{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/BarChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BarChart({\n  csvdata,\n  country\n}) {\n  _s();\n\n  const [selectedCountry, setSelectedCountry] = useState(country);\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n\n  const clearBoard = () => {\n    const accessToRef = d3.select(svgRef.current);\n    accessToRef.selectAll(\"svg > *\").remove();\n  };\n\n  const horizontal = (data, min, max) => {\n    var colorScale = d3.scaleLinear().domain([min, max]).range(['#ffdacc', '#ff6b33']); // D3 code here\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 90\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(svgRef.current).attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Add X axis\n\n    var x = d3.scaleLinear().domain([0, d3.max(data, d => d.expectancy)]).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)).selectAll(\"text\").attr(\"transform\", \"translate(-10,0)rotate(-45)\").style(\"text-anchor\", \"end\").attr('fill', 'blue'); // Y axis\n\n    var y = d3.scaleBand().range([0, height]).domain(data.map(function (d) {\n      return d.country;\n    })).padding(.1);\n    svg.append(\"g\").call(d3.axisLeft(y)).selectAll(\"text\").attr('fill', 'blue'); //Bars\n\n    svg.selectAll(\"myRect\").data(data).enter().append(\"rect\").attr(\"x\", x(0)).attr(\"y\", function (d) {\n      return y(d.country);\n    }).attr(\"width\", function (d) {\n      return x(d.expectancy);\n    }).attr(\"height\", y.bandwidth()) // .attr(\"fill\", \"#69b3a2\")\n    .attr(\"fill\", d => {\n      if (d.country == selectedCountry) return \"green\";\n      return colorScale(d.expectancy);\n    }).on('click', d => {\n      console.log(\"here\", d);\n      setSelectedCountry(d.country);\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"here\");\n    clearBoard();\n    let data = [];\n\n    for (var i = 0; i < csvdata.country.length; i++) {\n      let obj = {};\n      obj.country = csvdata.country[i];\n      obj.expectancy = csvdata.expectancy[i];\n      data.push(obj);\n    }\n\n    var min = 100000;\n    var max = -100000;\n\n    for (var i = 0; i < csvdata.expectancy.length; i++) {\n      if (csvdata.expectancy[i] < min) {\n        min = csvdata.expectancy[i];\n      }\n\n      if (csvdata.expectancy[i] > min) {\n        max = csvdata.expectancy[i];\n      }\n    }\n\n    data = [...data].sort((a, b) => b.expectancy - a.expectancy);\n    horizontal(data, min, max); // draw(data);\n  }, [csvdata, selectedCountry]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      style: {\n        width: \"500px\",\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BarChart, \"frsM90qq8WxhYsz2Sp0QzKwGPBM=\");\n\n_c = BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/BarChart.js"],"names":["React","useEffect","useRef","useState","d3","BarChart","csvdata","country","selectedCountry","setSelectedCountry","svgRef","wrapperRef","clearBoard","accessToRef","select","current","selectAll","remove","horizontal","data","min","max","colorScale","scaleLinear","domain","range","margin","top","right","bottom","left","width","height","svg","attr","append","x","d","expectancy","call","axisBottom","style","y","scaleBand","map","padding","axisLeft","enter","bandwidth","on","console","log","i","length","obj","push","sort","a","b"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\n\nexport function BarChart({csvdata,country}){\n\n    const [selectedCountry,setSelectedCountry] = useState(country);\n\n    const svgRef = useRef();\n    const wrapperRef = useRef();\n\n    const clearBoard=()=>{\n        const accessToRef = d3.select(svgRef.current)\n        accessToRef.selectAll(\"svg > *\").remove();\n    }\n\n    const horizontal = (data,min,max) => {\n\n       \n        var colorScale = d3.scaleLinear().domain([min,max]).range(['#ffdacc','#ff6b33'])\n        // D3 code here\n        var margin = {top: 20, right: 30, bottom: 40, left: 90},\n            width = 460 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(svgRef.current)\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // Add X axis\n        var x = d3.scaleLinear()\n        .domain([0, d3.max(data, (d) => d.expectancy)])\n        .range([ 0, width]);\n        \n        svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x))\n        .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\")\n            .attr('fill','blue');\n\n        // Y axis\n        var y = d3.scaleBand()\n        .range([ 0, height ])\n        .domain(data.map(function(d) { return d.country; }))\n        .padding(.1);\n        \n        svg.append(\"g\")\n        .call(d3.axisLeft(y))\n        .selectAll(\"text\")\n        .attr('fill','blue')\n        \n\n        //Bars\n        svg.selectAll(\"myRect\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", x(0) )\n        .attr(\"y\", function(d) { return y(d.country); })\n        .attr(\"width\", function(d) { return x(d.expectancy); })\n        .attr(\"height\", y.bandwidth() )\n        // .attr(\"fill\", \"#69b3a2\")\n        .attr(\"fill\",d=>{\n            if(d.country == selectedCountry)return \"green\";\n            return colorScale(d.expectancy);\n        })\n        .on('click',d=>{\n            console.log(\"here\",d)\n            setSelectedCountry(d.country)\n        });\n\n\n\n      \n    }\n\n    \n\n    useEffect(()=>{\n        console.log(\"here\")\n        clearBoard();\n        let data = []\n        for(var i=0;i<csvdata.country.length;i++){\n            let obj = {};\n            obj.country = csvdata.country[i];\n            obj.expectancy = csvdata.expectancy[i];\n            data.push(obj);\n        }\n\n        var min=100000\n         var max = -100000\n         \n         for(var i=0;i<csvdata.expectancy.length;i++){\n             if(csvdata.expectancy[i]<min){\n                 min = csvdata.expectancy[i];\n             }\n             if(csvdata.expectancy[i]>min){\n                 max = csvdata.expectancy[i];\n             }\n         }\n\n        data = [...data].sort((a,b)=>b.expectancy - a.expectancy)\n        horizontal(data,min,max);\n        // draw(data);\n        \n    },[csvdata,selectedCountry])\n    \n    return (\n        <div ref={wrapperRef}>\n          <svg ref={svgRef} style={{width:\"500px\",height:\"400px\"}}>\n          </svg>\n        </div>\n      );\n}"]},"metadata":{},"sourceType":"module"}