{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js\",\n    _s = $RefreshSig$();\n\nimport { geoMercator, geoPath, max } from \"d3\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { select, scaleLinear } from \"d3\"; // import useResizeObserver from \"./useResizeObserver\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart({\n  data,\n  property,\n  csvdata\n}) {\n  _s();\n\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  console.log(\"data\", data.features[0]);\n  useEffect(() => {\n    console.log(\"inside use effect\"); // const accessToRef = select(svgRef.current);\n\n    const width = 800;\n    const height = 550;\n    var min = 100000;\n    var max = -100000;\n\n    for (var i = 0; i < csvdata.expectancy.length; i++) {\n      if (csvdata.expectancy[i] < min) {\n        min = csvdata.expectancy[i];\n      }\n\n      if (csvdata.expectancy[i] > min) {\n        max = csvdata.expectancy[i];\n      }\n    }\n\n    var colorScale = scaleLinear().domain([min, max]).range(['#ffdacc', '#ff6b33']);\n    const projection = geoMercator().fitSize([width, height], selectedCountry || data);\n    const pathGenerator = geoPath().projection(projection);\n    const tooltip = select('.tooltip'); // accessToRef.selectAll(\".country\")\n    // .data(data.features)\n    // .append(\"path\")\n    // .attr(\"class\", \"country\")\n    // .attr(\"d\", feature => pathGenerator(feature));\n\n    const accessToRef = select(svgRef.current).attr(\"height\", height).attr(\"width\", width).style(\"background-color\", \"beige\"); // .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n\n    accessToRef.selectAll(\".country\").data(data.features).enter().append('path').attr('class', 'country').attr('d', feature => {\n      return pathGenerator(feature);\n    }).attr(\"fill\", feature => {\n      var req_name = feature.properties.name;\n      var index = -1;\n\n      for (var i = 0; i < csvdata.country.length; i++) {\n        if (csvdata.country[i] == req_name) {\n          console.log(\"yes\");\n          index = i;\n          break;\n        }\n      }\n\n      if (index == -1) return \"#ccc\";\n      return colorScale(csvdata.expectancy[index]);\n    }) // .on('mouseover',(feature) =>{\n    //     console.log(\"mouse over\",feature)\n    //     var req_name = feature.properties.name;\n    //     var index = -1;\n    //     for(var i=0;i<csvdata.country.length;i++){\n    //         if(csvdata.country[i]==req_name){\n    //             console.log(\"yes\");\n    //             index = i;\n    //             break;\n    //         }\n    //     }\n    //     if(index!=-1){\n    //        return tooltip\n    //         .style('opacity', 1)\n    //         .html(csvdata.expectancy[index]) // Replace with your desired tooltip content\n    //         // .style('left', `${event.pageX}px`)\n    //         // .style('top', `${event.pageY}px`);\n    //     }\n    // })\n    // .on('mouseout', () => {\n    //     // Hide the tooltip when mouse leaves the country\n    //    return tooltip.style('opacity', 0);\n    //   })\n    .on('click', feature => {\n      var req_name = feature.properties.name;\n\n      if (csvdata.country.includes(req_name)) {\n        // Perform actions when a clickable country is clicked\n        console.log('Clicked on:', select(this));\n        select(this).transition().duration('50').style(\"fill\", \"blue\");\n        setSelectedCountry(feature);\n      }\n    });\n  }, [data, property, selectedCountry]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoChart, \"PdqhNS8/dmfTZX5H30JaK6dl6y8=\");\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js"],"names":["geoMercator","geoPath","max","React","useEffect","useRef","useState","select","scaleLinear","GeoChart","data","property","csvdata","svgRef","wrapperRef","selectedCountry","setSelectedCountry","console","log","features","width","height","min","i","expectancy","length","colorScale","domain","range","projection","fitSize","pathGenerator","tooltip","accessToRef","current","attr","style","selectAll","enter","append","feature","req_name","properties","name","index","country","on","includes","transition","duration","marginBottom"],"mappings":"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","sourcesContent":["import { geoMercator, geoPath, max } from \"d3\";\nimport React,{ useEffect, useRef, useState } from \"react\";\nimport {select,scaleLinear} from \"d3\";\n\n// import useResizeObserver from \"./useResizeObserver\";\n\nfunction GeoChart({data,property,csvdata}){\n    \n    \n    const svgRef = useRef(null);\n    const wrapperRef = useRef();\n\n    const [selectedCountry,setSelectedCountry] = useState(null);\n\n    console.log(\"data\",data.features[0])\n\n    useEffect(()=>{\n\n        console.log(\"inside use effect\")\n    \n        // const accessToRef = select(svgRef.current);\n        const width=800;\n        const height = 550;\n\n        var min=100000\n        var max = -100000\n        \n        for(var i=0;i<csvdata.expectancy.length;i++){\n            if(csvdata.expectancy[i]<min){\n                min = csvdata.expectancy[i];\n            }\n            if(csvdata.expectancy[i]>min){\n                max = csvdata.expectancy[i];\n            }\n        }\n\n       var colorScale = scaleLinear().domain([min,max]).range(['#ffdacc','#ff6b33'])\n\n        const projection = geoMercator().fitSize([width,height],selectedCountry || data);\n\n        const pathGenerator = geoPath().projection(projection);\n\n        const tooltip = select('.tooltip');\n\n        // accessToRef.selectAll(\".country\")\n        // .data(data.features)\n        // .append(\"path\")\n        // .attr(\"class\", \"country\")\n        // .attr(\"d\", feature => pathGenerator(feature));\n        const accessToRef = select(svgRef.current)\n                                    .attr(\"height\",height)\n                                    .attr(\"width\",width)\n                                    .style(\"background-color\",\"beige\")\n                                    // .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n        accessToRef.selectAll(\".country\")\n                    .data(data.features)\n                    .enter()\n                        .append('path')\n                        .attr('class','country')\n                        .attr('d', feature=> {\n                            return pathGenerator(feature)\n                        })\n                        .attr(\"fill\",feature => {\n                            var req_name = feature.properties.name;\n                            var index = -1;\n                            for(var i=0;i<csvdata.country.length;i++){\n                                if(csvdata.country[i]==req_name){\n                                    console.log(\"yes\");\n                                    index = i;\n                                    break;\n                                }\n                            }\n                            if(index==-1)return \"#ccc\";\n                            return colorScale(csvdata.expectancy[index])\n                        })\n                        // .on('mouseover',(feature) =>{\n                \n                        //     console.log(\"mouse over\",feature)\n                        //     var req_name = feature.properties.name;\n                        //     var index = -1;\n                        //     for(var i=0;i<csvdata.country.length;i++){\n                        //         if(csvdata.country[i]==req_name){\n                        //             console.log(\"yes\");\n                        //             index = i;\n                        //             break;\n                        //         }\n                        //     }\n                        //     if(index!=-1){\n                        //        return tooltip\n                        //         .style('opacity', 1)\n                        //         .html(csvdata.expectancy[index]) // Replace with your desired tooltip content\n                        //         // .style('left', `${event.pageX}px`)\n                        //         // .style('top', `${event.pageY}px`);\n                        //     }\n                            \n                        // })\n                        // .on('mouseout', () => {\n                        //     // Hide the tooltip when mouse leaves the country\n                        //    return tooltip.style('opacity', 0);\n                        //   })\n                          .on('click', (feature) => {\n                            var req_name = feature.properties.name;\n                            if (csvdata.country.includes(req_name)) {\n                              // Perform actions when a clickable country is clicked\n                              console.log('Clicked on:', select(this));\n\n                                    select(this)\n                                        .transition()\n                                        .duration('50')\n                                        .style(\"fill\",\"blue\");\n                              setSelectedCountry(feature);\n                            }\n                        });\n                    \n\n    },[data,property,selectedCountry])\n\n\n    return (\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n          <svg ref={svgRef}></svg>\n        </div>\n      );\n\n}\n\n\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}