{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/Pcp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport '../css/ScatterPlot.css';\nimport axios from 'axios';\nimport '../css/Pcp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pcp = () => {\n  _s();\n\n  let scatterRef = useRef(null);\n  const [state, setState] = useState();\n  const [dimensions, setDimensions] = useState();\n  var margin = {\n    top: 50,\n    right: 50,\n    bottom: 50,\n    left: 50\n  };\n  var width = 1400 - margin.left - margin.right;\n  var height = 500 - margin.top - margin.bottom;\n  var y = {};\n  var dragging = {};\n  var line = d3.line();\n  var background_lines, foreground_lines;\n  var tempDims;\n  const colormap = [\"red\", \"blue\", \"black\", \"green\"];\n\n  const create_dimensions = tempState => {\n    let dimensionz = [];\n    let tempObj = {};\n    Object.keys(tempState[0]).map(function (key, index) {\n      if (key != 'color') {\n        if (typeof tempState[0][key] === \"number\") {\n          tempObj = {\n            name: key,\n            scale: d3.scaleLinear().range([height, 0]),\n            type: \"number\"\n          };\n        } else {\n          tempObj = {\n            name: key,\n            scale: d3.scaleBand().range([0, height]),\n            type: \"string\"\n          };\n        }\n\n        dimensionz.push(tempObj);\n      }\n    });\n    setDimensions(dimensionz);\n    tempDims = dimensionz;\n  };\n\n  const create_dimensions_msdpcp = arr => {\n    let dimensionz = [];\n    let tempObj = {};\n\n    for (let i = 0; i < arr.length; i++) {\n      tempObj = {\n        name: arr[i],\n        scale: d3.scaleLinear().range([height, 0]),\n        type: \"number\"\n      };\n      dimensionz.push(tempObj);\n    }\n\n    setDimensions(dimensionz);\n    tempDims = dimensionz;\n  };\n\n  var x;\n  useEffect(() => {\n    // if(props.readFromMDSV==undefined || mdsPcpButton==false){\n    axios.get('http://localhost:8000/pcp').then(repos => {\n      const allRepos = repos.data;\n      let parsedResponse = JSON.parse(allRepos);\n      let tempState = parsedResponse;\n      console.log(\"data\", tempState);\n      var no_of_dimensions = Object.keys(parsedResponse[0]).length - 1;\n      create_dimensions(parsedResponse);\n      tempDims.forEach(function (dimension) {\n        dimension.scale.domain(dimension.type === \"number\" ? d3.extent(parsedResponse, function (d) {\n          return +d[dimension.name];\n        }) : parsedResponse.map(function (d) {\n          return d[dimension.name];\n        }).sort());\n      });\n      setState(tempState);\n      clearBoard();\n      draw();\n    }); // }\n    // else if(mdsPcpButton==true){\n    //     axios.get('http://localhost:8000/mdspcp').then((repos) => {\n    //         const allRepos = repos.data;\n    //         let parsedResponse = JSON.parse(allRepos);\n    //         let tempState = parsedResponse;\n    //         console.log(\"pcp data\",tempState)\n    //         create_dimensions_msdpcp(props.readFromMDSV);\n    //             tempDims.forEach(function(dimension) {\n    //                 dimension.scale.domain(dimension.type === \"number\"\n    //                     ? d3.extent(parsedResponse, function(d) { return +d[dimension.name]; })\n    //                     : parsedResponse.map(function(d) { return d[dimension.name]; }).sort());\n    //             });\n    //         setState(tempState);\n    //         clearBoard();\n    //         draw();\n    //     });\n    // }\n    // clearBoard();\n    // draw();\n  }, []);\n  useEffect(() => {\n    clearBoard();\n    draw();\n  }, [state, dimensions]);\n\n  const clearBoard = () => {\n    const accessToRef = d3.select(scatterRef.current);\n    accessToRef.selectAll(\"svg > *\").remove();\n  };\n\n  const coordinate = d => {\n    var v = dragging[d.name];\n    return v == null ? x(d.name) : v;\n  };\n\n  const transition = g => {\n    return g.transition().duration(500);\n  };\n\n  const path = d => {\n    return line(dimensions.map(function (dimension) {\n      var draggingV = dragging[dimension.name];\n      var xpoint = draggingV == undefined ? x(dimension.name) : draggingV;\n      let ypoint = dimension.type === \"string\" ? dimension.scale(d[dimension.name]) + dimension.scale.bandwidth() / 2 : dimension.scale(d[dimension.name]);\n      return [xpoint, ypoint];\n    }));\n  };\n\n  const brushstart = () => {\n    d3.event.sourceEvent.stopPropagation();\n  };\n\n  const brush = svg => {\n    var actives = [];\n    svg.selectAll(\".brush\").filter(function (d) {\n      return d3.brushSelection(this);\n    }).each(function (key) {\n      actives.push({\n        dimension: key,\n        extent: d3.brushSelection(this)\n      });\n    });\n\n    if (actives.length === 0) {\n      foreground_lines.style(\"display\", null);\n    } else {\n      foreground_lines.style(\"display\", function (d) {\n        return actives.every(function (brushObj) {\n          return brushObj.extent[0] <= brushObj.dimension.scale(d[brushObj.dimension.name]) && brushObj.dimension.scale(d[brushObj.dimension.name]) <= brushObj.extent[1];\n        }) ? null : \"none\";\n      });\n    }\n  };\n\n  const draw = () => {\n    if (state != undefined) {\n      x = d3.scalePoint().domain(dimensions.map(function (d) {\n        return d.name;\n      })).range([0, width]);\n      var svg = d3.select(scatterRef.current).attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      if (state != undefined) {\n        background_lines = svg.append(\"g\").attr(\"class\", \"background\").selectAll(\"path\").data(state).enter().append(\"path\").attr(\"d\", path);\n        foreground_lines = svg.append(\"g\").attr(\"class\", \"foreground\").selectAll(\"path\").data(state).enter().append(\"path\").attr(\"d\", path).style(\"stroke\", function (d) {\n          return colormap[d['color']];\n        });\n        var g = svg.selectAll(\".dimension\").data(dimensions).enter().append(\"g\").attr(\"class\", \"dimension\").attr(\"transform\", function (d) {\n          return \"translate(\" + x(d.name) + \")\";\n        }).call(d3.drag().on(\"start\", function (d) {\n          dragging[d.name] = x(d.name);\n          background_lines.attr(\"visibility\", \"hidden\");\n        }).on(\"drag\", function (d) {\n          dragging[d.name] = Math.min(width, Math.max(0, d3.event.x));\n          foreground_lines.attr(\"d\", path);\n          dimensions.sort(function (a, b) {\n            return coordinate(a) - coordinate(b);\n          });\n          x.domain(dimensions.map(function (d) {\n            return d.name;\n          }));\n          g.attr(\"transform\", function (d) {\n            return \"translate(\" + coordinate(d) + \")\";\n          });\n        }).on(\"end\", function (d) {\n          delete dragging[d.name];\n          transition(d3.select(this)).attr(\"transform\", \"translate(\" + x(d.name) + \")\");\n          transition(foreground_lines).attr(\"d\", path);\n          background_lines.attr(\"d\", path).transition().delay(500).duration(0).attr(\"visibility\", null);\n        }));\n        g.append(\"g\").attr(\"class\", \"axis\").each(function (d) {\n          d3.select(this).call(d3.axisLeft().scale(d.scale));\n        }).append(\"text\").style(\"text-anchor\", \"middle\").attr(\"class\", \"axis-label\").attr(\"y\", -19).style(\"fill\", \"black\").style(\"font-size\", 7).text(function (d) {\n          return d.name;\n        });\n        g.append(\"g\").attr(\"class\", \"brush\").each(function (d) {\n          d3.select(this).call(d.scale.brush = d3.brushY().extent([[-10, 0], [10, height]]).on(\"start\", brushstart).on(\"brush\", function (d) {\n            brush(svg);\n          }).on(\"end\", function (d) {\n            brush(svg);\n          }));\n        }).selectAll(\"rect\").attr(\"x\", -8).attr(\"width\", 16);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: state ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: scatterRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 28\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Pcp, \"qT2kRFtjvU/YRSPaqdGord1HYQw=\");\n\n_c = Pcp;\nexport default Pcp;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pcp\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/Pcp.js"],"names":["React","useEffect","useRef","useState","d3","axios","Pcp","scatterRef","state","setState","dimensions","setDimensions","margin","top","right","bottom","left","width","height","y","dragging","line","background_lines","foreground_lines","tempDims","colormap","create_dimensions","tempState","dimensionz","tempObj","Object","keys","map","key","index","name","scale","scaleLinear","range","type","scaleBand","push","create_dimensions_msdpcp","arr","i","length","x","get","then","repos","allRepos","data","parsedResponse","JSON","parse","console","log","no_of_dimensions","forEach","dimension","domain","extent","d","sort","clearBoard","draw","accessToRef","select","current","selectAll","remove","coordinate","v","transition","g","duration","path","draggingV","xpoint","undefined","ypoint","bandwidth","brushstart","event","sourceEvent","stopPropagation","brush","svg","actives","filter","brushSelection","each","style","every","brushObj","scalePoint","attr","append","enter","call","drag","on","Math","min","max","a","b","delay","axisLeft","text","brushY"],"mappings":"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","sourcesContent":["import React,{useEffect,useRef,useState} from 'react';\nimport * as d3 from 'd3';\nimport '../css/ScatterPlot.css';\nimport axios from 'axios';\nimport '../css/Pcp.css';\n\n const Pcp = () => {\n    let scatterRef = useRef(null);\n    const [state, setState] = useState();\n    const [dimensions, setDimensions] = useState();\n    var margin = {top: 50, right: 50, bottom: 50, left: 50};\n    var width = 1400 - margin.left - margin.right;\n    var height = 500 - margin.top - margin.bottom;\n    var y = {};\n    var dragging = {};\n    var line = d3.line();\n    var background_lines,foreground_lines;\n    var tempDims;\n    const colormap=[\"red\",\"blue\",\"black\",\"green\"];\n    const create_dimensions=(tempState)=>{\n        let dimensionz =[];\n        let tempObj={};\n        Object.keys(tempState[0]).map(function(key,index){\n            if(key!='color'){\n                if(typeof tempState[0][key] ===\"number\")\n                {\n                    tempObj={\n                        name: key,\n                        scale: d3.scaleLinear().range([height, 0]),\n                        type: \"number\"\n                    };\n                }\n                else\n                {\n                    tempObj={\n                        name: key,\n                        scale: d3.scaleBand().range([0, height]),\n                        type: \"string\"\n                    };\n                }\n                dimensionz.push(tempObj);\n            }\n        });\n        setDimensions(dimensionz);\n        tempDims=dimensionz;\n    }\n\n    const create_dimensions_msdpcp=(arr)=>{\n        let dimensionz =[];\n        let tempObj={};\n        for(let i=0;i<arr.length;i++)\n        {\n            tempObj={\n                    name: arr[i],\n                    scale: d3.scaleLinear().range([height, 0]),\n                    type: \"number\"\n                };\n            dimensionz.push(tempObj);\n        }\n        setDimensions(dimensionz);\n        tempDims=dimensionz;\n    };\n    \n    var x;\n\n    useEffect(()=>{\n        // if(props.readFromMDSV==undefined || mdsPcpButton==false){\n            axios.get('http://localhost:8000/pcp').then((repos) => {\n                const allRepos = repos.data;\n                let parsedResponse = JSON.parse(allRepos);\n                let tempState = parsedResponse;\n                console.log(\"data\",tempState)\n                var no_of_dimensions = Object.keys(parsedResponse[0]).length - 1;\n                create_dimensions(parsedResponse);\n                    tempDims.forEach(function(dimension) {\n                        dimension.scale.domain(dimension.type === \"number\"\n                            ? d3.extent(parsedResponse, function(d) { return +d[dimension.name]; })\n                            : parsedResponse.map(function(d) { return d[dimension.name]; }).sort());\n                    });\n                setState(tempState);\n                clearBoard();\n                draw();\n            });\n        // }\n        // else if(mdsPcpButton==true){\n        //     axios.get('http://localhost:8000/mdspcp').then((repos) => {\n        //         const allRepos = repos.data;\n        //         let parsedResponse = JSON.parse(allRepos);\n        //         let tempState = parsedResponse;\n        //         console.log(\"pcp data\",tempState)\n        //         create_dimensions_msdpcp(props.readFromMDSV);\n        //             tempDims.forEach(function(dimension) {\n        //                 dimension.scale.domain(dimension.type === \"number\"\n        //                     ? d3.extent(parsedResponse, function(d) { return +d[dimension.name]; })\n        //                     : parsedResponse.map(function(d) { return d[dimension.name]; }).sort());\n        //             });\n        //         setState(tempState);\n        //         clearBoard();\n        //         draw();\n        //     });\n        // }\n        // clearBoard();\n        // draw();\n    },[]);\n\n    useEffect(()=>{\n        clearBoard();\n        draw();\n    },[state,dimensions]);\n\n    const clearBoard=()=>{\n        const accessToRef = d3.select(scatterRef.current);\n        accessToRef.selectAll(\"svg > *\").remove();\n    }\n\n\n    const coordinate=(d)=>{\n        var v = dragging[d.name];\n        return v == null ? x(d.name) : v;\n    }\n\n    const transition=(g)=>{\n        return g.transition().duration(500);\n    }\n\n    const path=(d)=>{\n        return line(dimensions.map(function(dimension) {\n            var draggingV = dragging[dimension.name];\n            var xpoint = draggingV == undefined ? x(dimension.name) : draggingV;\n            let ypoint = dimension.type===\"string\" ? dimension.scale(d[dimension.name]) + dimension.scale.bandwidth()/2 : dimension.scale(d[dimension.name]);\n            return [xpoint, ypoint];\n        }));\n    }\n            \n     const brushstart=()=>{\n            d3.event.sourceEvent.stopPropagation();\n    };\n\n    const brush=(svg)=>{\n        var actives = [];\n        svg.selectAll(\".brush\")\n            .filter(function (d) {\n                return d3.brushSelection(this);\n            })\n            .each(function (key) {\n                actives.push({\n                    dimension: key,\n                    extent: d3.brushSelection(this)\n                });\n            });\n        if (actives.length === 0) {\n            foreground_lines.style(\"display\", null);\n        } else {\n            foreground_lines.style(\"display\", function (d) {\n                return actives.every(function (brushObj) {\n                    return brushObj.extent[0] <= brushObj.dimension.scale(d[brushObj.dimension.name]) && brushObj.dimension.scale(d[brushObj.dimension.name]) <= brushObj.extent[1];\n                }) ? null : \"none\";\n            });\n        }\n    }\n\n   \n\n    const draw =() =>{\n\n        if(state!=undefined){\n            x = d3.scalePoint()\n                    .domain(dimensions.map(function(d) { return d.name; }))\n                    .range([0, width]);\n\n            var svg = d3.select(scatterRef.current)\n                        .attr(\"width\", width + margin.left + margin.right)\n                        .attr(\"height\", height + margin.top + margin.bottom)\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n            \n            if(state!=undefined){\n                background_lines = svg.append(\"g\")\n                                .attr(\"class\", \"background\")\n                                .selectAll(\"path\")\n                                .data(state)\n                                .enter()\n                                .append(\"path\")\n                                .attr(\"d\", path);\n            \n                foreground_lines = svg.append(\"g\")\n                                .attr(\"class\", \"foreground\")\n                                .selectAll(\"path\")\n                                .data(state)\n                                .enter().append(\"path\")\n                                .attr(\"d\", path)\n                                .style(\"stroke\",function(d){return colormap[d['color']]});\n            \n                var g = svg.selectAll(\".dimension\")\n                            .data(dimensions)\n                            .enter().append(\"g\")\n                            .attr(\"class\", \"dimension\")\n                            .attr(\"transform\", function(d) { return \"translate(\" + x(d.name) + \")\"; })\n                            .call(d3.drag()\n                            .on(\"start\", function(d) {\n                                    dragging[d.name] = x(d.name);\n                                    background_lines.attr(\"visibility\",\"hidden\");\n                                    })\n                            .on(\"drag\", function(d) {\n                                dragging[d.name] = Math.min(width, Math.max(0, d3.event.x));\n                                foreground_lines.attr(\"d\", path);\n                                dimensions.sort(function(a, b) { return coordinate(a) - coordinate(b); });\n                                x.domain(dimensions.map(function(d) { return d.name; }));\n                                g.attr(\"transform\", function(d) { return \"translate(\" + coordinate(d) + \")\"; })\n                            })\n                            .on(\"end\", function(d) {\n                                delete dragging[d.name];\n                                transition(d3.select(this)).attr(\"transform\", \"translate(\" + x(d.name) + \")\");\n                                transition(foreground_lines).attr(\"d\", path);\n                                background_lines\n                                    .attr(\"d\", path)\n                                    .transition()\n                                    .delay(500)\n                                    .duration(0)\n                                    .attr(\"visibility\", null);\n                            })\n                        );\n                \n                g.append(\"g\")\n                .attr(\"class\", \"axis\")\n                .each(function(d) { \n                    d3.select(this)\n                    .call(d3.axisLeft()\n                    .scale(d.scale));\n                 })\n                .append(\"text\")\n                .style(\"text-anchor\", \"middle\")\n                .attr(\"class\", \"axis-label\")\n                .attr(\"y\", -19)\n                .style(\"fill\",\"black\")\n                .style(\"font-size\",7)\n                .text(function(d) { return d.name; });\n                \n                g.append(\"g\")\n                    .attr(\"class\", \"brush\")\n                    .each(function(d)\n                    {\n                        d3.select(this)\n                        .call(d.scale.brush = d3.brushY().extent([[-10,0],[10,height]])\n                        .on(\"start\", brushstart)\n                        .on(\"brush\", function(d){brush(svg)})\n                        .on(\"end\", function(d){brush(svg)}));\n                    })\n                    .selectAll(\"rect\")\n                    .attr(\"x\", -8)\n                    .attr(\"width\", 16);\n            }\n        }\n    }\n    return(\n        <div>\n           {\n              state ? <div>\n                  <svg ref={scatterRef}></svg>\n                  {/* <div className=\"legend\"><b>Color Legend</b><br/>\n                        Red   -  Cluster 1<br/>\n                        Blue  -  Cluster 2<br/>\n                        Black-  Cluster 3<br/>\n                        Green  -  Cluster 4<br/>\n                  </div> */}\n                  <br/>\n                  </div> : <div />\n            }\n        </div>\n    );\n\n};\nexport default Pcp;\n\n\n"]},"metadata":{},"sourceType":"module"}