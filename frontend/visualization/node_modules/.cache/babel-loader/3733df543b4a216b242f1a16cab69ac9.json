{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/YearChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function YearChart({\n  country\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n\n  const clearBoard = () => {\n    const accessToRef = d3.select(svgRef.current);\n    accessToRef.selectAll(\"svg > *\").remove();\n  };\n\n  const horizontal = data => {\n    // D3 code here\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 90\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(svgRef.current).attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).style(\"background-color\", \"red\").append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Add X axis\n\n    var x = d3.scaleLinear().domain([0, d3.max(data, d => d.expectancy)]).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)).selectAll(\"text\").attr(\"transform\", \"translate(-10,0)rotate(-45)\").style(\"text-anchor\", \"end\").attr('fill', 'blue'); // Y axis\n\n    var y = d3.scaleBand().range([0, height]).domain(data.map(function (d) {\n      return d.year;\n    })).padding(.1);\n    svg.append(\"g\").call(d3.axisLeft(y)).selectAll(\"text\").attr('fill', 'blue'); //Bars\n\n    svg.selectAll(\"myRect\").data(data).enter().append(\"rect\").attr(\"x\", x(0)).attr(\"y\", function (d) {\n      return y(d.year);\n    }).attr(\"width\", function (d) {\n      return x(d.expectancy - 10);\n    }).attr(\"height\", y.bandwidth()) // .attr(\"fill\", \"#69b3a2\")\n    .attr(\"fill\", \"pink\").on('click', d => {\n      console.log(\"here\", d);\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"year chart\");\n    axios({\n      method: \"GET\",\n      url: \"http://localhost:8000/getAllData\"\n    }).then(repos => {\n      const allRepos = repos.data;\n      let parsedResponse = JSON.parse(allRepos);\n      let tmpData = [];\n      parsedResponse.forEach(ele => {\n        if (ele.Country == country) {\n          let obj = {};\n          obj.year = ele.Year;\n          obj.expectancy = ele['Life Expectancy'];\n          tmpData.push(obj);\n        }\n      });\n      tmpData = [...tmpData].sort((a, b) => b.year - a.year);\n      clearBoard();\n      horizontal(tmpData); // setScreeState(allRepos);\n    }); // draw(data);\n  }, [country]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      style: {\n        width: \"500px\",\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n\n_s(YearChart, \"wHGsJvYloKVvWo8EGgYwue3juQs=\");\n\n_c = YearChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"YearChart\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/YearChart.js"],"names":["React","useEffect","useRef","useState","d3","axios","YearChart","country","svgRef","wrapperRef","clearBoard","accessToRef","select","current","selectAll","remove","horizontal","data","margin","top","right","bottom","left","width","height","svg","attr","style","append","x","scaleLinear","domain","max","d","expectancy","range","call","axisBottom","y","scaleBand","map","year","padding","axisLeft","enter","bandwidth","on","console","log","method","url","then","repos","allRepos","parsedResponse","JSON","parse","tmpData","forEach","ele","Country","obj","Year","push","sort","a","b"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\n\nexport function YearChart({country}){\n\n\n    const svgRef = useRef();\n    const wrapperRef = useRef();\n\n    const clearBoard=()=>{\n        const accessToRef = d3.select(svgRef.current)\n        accessToRef.selectAll(\"svg > *\").remove();\n    }\n\n    const horizontal = (data) => {\n\n        \n        // D3 code here\n        var margin = {top: 20, right: 30, bottom: 40, left: 90},\n            width = 460 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(svgRef.current)\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .style(\"background-color\",\"red\")\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // Add X axis\n        var x = d3.scaleLinear()\n        .domain([0, d3.max(data, (d) => d.expectancy)])\n        .range([ 0, width]);\n        \n        svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x))\n        .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\")\n            .attr('fill','blue');\n\n        // Y axis\n        var y = d3.scaleBand()\n        .range([ 0, height ])\n        .domain(data.map(function(d) { return d.year; }))\n        .padding(.1);\n        \n        svg.append(\"g\")\n        .call(d3.axisLeft(y))\n        .selectAll(\"text\")\n        .attr('fill','blue')\n        \n\n        //Bars\n        svg.selectAll(\"myRect\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", x(0) )\n        .attr(\"y\", function(d) { return y(d.year); })\n        .attr(\"width\", function(d) { return x(d.expectancy-10); })\n        .attr(\"height\", y.bandwidth() )\n        // .attr(\"fill\", \"#69b3a2\")\n        .attr(\"fill\",\"pink\")\n        .on('click',d=>{\n            console.log(\"here\",d)\n            \n        });\n\n\n\n      \n    }\n\n    \n\n    useEffect(()=>{\n        console.log(\"year chart\")\n        axios({\n            method: \"GET\",\n            url:\"http://localhost:8000/getAllData\"\n          }).then((repos) => {\n            const allRepos = repos.data;\n            let parsedResponse = JSON.parse(allRepos);\n            let tmpData = [];\n            parsedResponse.forEach((ele)=>{\n                if(ele.Country==country){\n                    let obj = {};\n                    obj.year = ele.Year;\n                    obj.expectancy = ele['Life Expectancy'];\n                    tmpData.push(obj);\n                }\n            })\n            tmpData = [...tmpData].sort((a,b)=>b.year - a.year)\n            clearBoard();\n            horizontal(tmpData);\n            // setScreeState(allRepos);\n          });\n      \n\n        \n        // draw(data);\n        \n    },[country])\n    \n    return (\n        <div ref={wrapperRef}>\n          <svg ref={svgRef} style={{width:\"500px\",height:\"400px\"}}>\n          </svg>\n        </div>\n      );\n}"]},"metadata":{},"sourceType":"module"}