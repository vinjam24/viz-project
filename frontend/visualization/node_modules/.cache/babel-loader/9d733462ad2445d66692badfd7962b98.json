{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/DensityPlot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DensityPlot({\n  csvdata\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n\n  const clearBoard = () => {\n    const accessToRef = d3.select(svgRef.current);\n    accessToRef.selectAll(\"svg > *\").remove();\n  }; // Function to calculate the kernel density estimate\n\n\n  function kernelDensityEstimator(kernel, x) {\n    return function (sample) {\n      return x.map(x => [x, d3.mean(sample, v => kernel(x - v))]);\n    };\n  } // Epanechnikov kernel function\n\n\n  function kernelEpanechnikov(k) {\n    return function (v) {\n      return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\n    };\n  }\n\n  const draw = (data1, data2) => {};\n\n  useEffect(() => {\n    let tmpData1 = [];\n    let tmpData2 = [];\n    axios.get('http://localhost:8000/pcp').then(repos => {\n      const allRepos = repos.data;\n      let parsedResponse = JSON.parse(allRepos);\n      let tempState = parsedResponse;\n      console.log(\"data\", tempState);\n      tempState.forEach(ele => {\n        // let obj1 = {};\n        // obj1.alcohol = ele.Alcohol;\n        // obj1.expectancy = ele['Life Expectancy'];\n        // let obj2 = {}\n        // obj2.expenditure = ele['Total expenditure'];\n        // obj2.expectancy = ele['Life Expectancy'];\n        tmpData1.push(ele['Alcohol']);\n        tmpData2.push(ele['Total Expenditure']);\n      });\n      clearBoard();\n      draw(tmpData1, tmpData2);\n    }); // draw(data);\n  }, [csvdata]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      style: {\n        width: \"500px\",\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DensityPlot, \"wHGsJvYloKVvWo8EGgYwue3juQs=\");\n\n_c = DensityPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"DensityPlot\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/DensityPlot.js"],"names":["React","useEffect","useRef","d3","axios","DensityPlot","csvdata","svgRef","wrapperRef","clearBoard","accessToRef","select","current","selectAll","remove","kernelDensityEstimator","kernel","x","sample","map","mean","v","kernelEpanechnikov","k","Math","abs","draw","data1","data2","tmpData1","tmpData2","get","then","repos","allRepos","data","parsedResponse","JSON","parse","tempState","console","log","forEach","ele","push","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,SAASC,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA+B;AAAA;;AAElC,QAAMC,MAAM,GAAGL,MAAM,EAArB;AACA,QAAMM,UAAU,GAAGN,MAAM,EAAzB;;AAEA,QAAMO,UAAU,GAAC,MAAI;AACjB,UAAMC,WAAW,GAAGP,EAAE,CAACQ,MAAH,CAAUJ,MAAM,CAACK,OAAjB,CAApB;AACAF,IAAAA,WAAW,CAACG,SAAZ,CAAsB,SAAtB,EAAiCC,MAAjC;AACH,GAHD,CALkC,CAUlC;;;AACA,WAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,CAAxC,EAA2C;AACvC,WAAO,UAAUC,MAAV,EAAkB;AACzB,aAAOD,CAAC,CAACE,GAAF,CAAOF,CAAD,IAAO,CAChBA,CADgB,EAEhBd,EAAE,CAACiB,IAAH,CAAQF,MAAR,EAAiBG,CAAD,IAAOL,MAAM,CAACC,CAAC,GAAGI,CAAL,CAA7B,CAFgB,CAAb,CAAP;AAIC,KALD;AAMH,GAlBiC,CAoBlC;;;AACA,WAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAC3B,WAAO,UAAUF,CAAV,EAAa;AACpB,aAAOG,IAAI,CAACC,GAAL,CAASJ,CAAC,IAAIE,CAAd,KAAoB,CAApB,GAAwB,QAAQ,IAAIF,CAAC,GAAGA,CAAhB,IAAqBE,CAA7C,GAAiD,CAAxD;AACC,KAFD;AAGH;;AAED,QAAMG,IAAI,GAAE,CAACC,KAAD,EAAOC,KAAP,KAAiB,CAQ5B,CARD;;AAYA3B,EAAAA,SAAS,CAAC,MAAI;AAEV,QAAI4B,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA1B,IAAAA,KAAK,CAAC2B,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA6CC,KAAD,IAAW;AAC/C,YAAMC,QAAQ,GAAGD,KAAK,CAACE,IAAvB;AACA,UAAIC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAArB;AACA,UAAIK,SAAS,GAAGH,cAAhB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBF,SAAnB;AACAA,MAAAA,SAAS,CAACG,OAAV,CAAkBC,GAAG,IAAI;AACrB;AACA;AACA;AAEA;AACA;AACA;AACAd,QAAAA,QAAQ,CAACe,IAAT,CAAcD,GAAG,CAAC,SAAD,CAAjB;AACAb,QAAAA,QAAQ,CAACc,IAAT,CAAcD,GAAG,CAAC,mBAAD,CAAjB;AACH,OAVD;AAWAlC,MAAAA,UAAU;AACViB,MAAAA,IAAI,CAACG,QAAD,EAAUC,QAAV,CAAJ;AACH,KAlBL,EAJU,CAwBV;AAEH,GA1BQ,EA0BP,CAACxB,OAAD,CA1BO,CAAT;AA4BA,sBACI;AAAK,IAAA,GAAG,EAAEE,UAAV;AAAA,2BACE;AAAK,MAAA,GAAG,EAAED,MAAV;AAAkB,MAAA,KAAK,EAAE;AAACsC,QAAAA,KAAK,EAAC,OAAP;AAAeC,QAAAA,MAAM,EAAC;AAAtB;AAAzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAzEezC,W;;KAAAA,W","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\n\nexport function DensityPlot({csvdata}){\n\n    const svgRef = useRef();\n    const wrapperRef = useRef();\n\n    const clearBoard=()=>{\n        const accessToRef = d3.select(svgRef.current)\n        accessToRef.selectAll(\"svg > *\").remove();\n    }\n\n    // Function to calculate the kernel density estimate\n    function kernelDensityEstimator(kernel, x) {\n        return function (sample) {\n        return x.map((x) => [\n            x,\n            d3.mean(sample, (v) => kernel(x - v)),\n        ]);\n        };\n    }\n    \n    // Epanechnikov kernel function\n    function kernelEpanechnikov(k) {\n        return function (v) {\n        return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\n        };\n    }\n\n    const draw= (data1,data2) => {\n\n\n\n\n\n\n      \n    }\n\n    \n\n    useEffect(()=>{\n       \n        let tmpData1 = []\n        let tmpData2 = []\n        axios.get('http://localhost:8000/pcp').then((repos) => {\n                const allRepos = repos.data;\n                let parsedResponse = JSON.parse(allRepos);\n                let tempState = parsedResponse;\n                console.log(\"data\",tempState)\n                tempState.forEach(ele => {\n                    // let obj1 = {};\n                    // obj1.alcohol = ele.Alcohol;\n                    // obj1.expectancy = ele['Life Expectancy'];\n\n                    // let obj2 = {}\n                    // obj2.expenditure = ele['Total expenditure'];\n                    // obj2.expectancy = ele['Life Expectancy'];\n                    tmpData1.push(ele['Alcohol']);\n                    tmpData2.push(ele['Total Expenditure']);\n                });\n                clearBoard();\n                draw(tmpData1,tmpData2);\n            });\n\n        // draw(data);\n        \n    },[csvdata])\n    \n    return (\n        <div ref={wrapperRef}>\n          <svg ref={svgRef} style={{width:\"500px\",height:\"400px\"}}>\n          </svg>\n        </div>\n      );\n}"]},"metadata":{},"sourceType":"module"}