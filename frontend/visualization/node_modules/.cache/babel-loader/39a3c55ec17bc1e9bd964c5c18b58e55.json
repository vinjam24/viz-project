{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/DensityPlot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DensityPlot({\n  csvdata\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n\n  const clearBoard = () => {\n    const accessToRef = d3.select(svgRef.current);\n    accessToRef.selectAll(\"svg > *\").remove();\n  }; // Function to compute density\n\n\n  function kernelDensityEstimator(kernel, X) {\n    return function (V) {\n      return X.map(function (x) {\n        return [x, d3.mean(V, function (v) {\n          return kernel(x - v);\n        })];\n      });\n    };\n  }\n\n  function kernelEpanechnikov(k) {\n    return function (v) {\n      return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\n    };\n  }\n\n  const horizontal = (data, min, max) => {\n    // D3 code here\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 90\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(svgRef.current).attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // add the x Axis\n\n    var x = d3.scaleLinear().domain([0, 1000]).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // add the y Axis\n\n    var y = d3.scaleLinear().range([height, 0]).domain([0, 0.01]);\n    svg.append(\"g\").call(d3.axisLeft(y)); // Compute kernel density estimation\n\n    var kde = kernelDensityEstimator(kernelEpanechnikov(7), x.ticks(60));\n    var density1 = kde(data.filter(function (d) {\n      return d.type === \"variable 1\";\n    }).map(function (d) {\n      return d.value;\n    }));\n    var density2 = kde(data.filter(function (d) {\n      return d.type === \"variable 2\";\n    }).map(function (d) {\n      return d.value;\n    })); // Plot the area\n\n    svg.append(\"path\").attr(\"class\", \"mypath\").datum(density1).attr(\"fill\", \"#69b3a2\").attr(\"opacity\", \".6\").attr(\"stroke\", \"#000\").attr(\"stroke-width\", 1).attr(\"stroke-linejoin\", \"round\").attr(\"d\", d3.line().curve(d3.curveBasis).x(function (d) {\n      return x(d[0]);\n    }).y(function (d) {\n      return y(d[1]);\n    })); // Plot the area\n\n    svg.append(\"path\").attr(\"class\", \"mypath\").datum(density2).attr(\"fill\", \"#404080\").attr(\"opacity\", \".6\").attr(\"stroke\", \"#000\").attr(\"stroke-width\", 1).attr(\"stroke-linejoin\", \"round\").attr(\"d\", d3.line().curve(d3.curveBasis).x(function (d) {\n      return x(d[0]);\n    }).y(function (d) {\n      return y(d[1]);\n    }));\n  };\n\n  useEffect(() => {\n    console.log(\"here\");\n    clearBoard();\n    let data = [];\n\n    for (var i = 0; i < csvdata.country.length; i++) {\n      let obj = {};\n      obj.country = csvdata.country[i];\n      obj.expectancy = csvdata.expectancy[i];\n      data.push(obj);\n    }\n\n    var min = 100000;\n    var max = -100000;\n\n    for (var i = 0; i < csvdata.expectancy.length; i++) {\n      if (csvdata.expectancy[i] < min) {\n        min = csvdata.expectancy[i];\n      }\n\n      if (csvdata.expectancy[i] > min) {\n        max = csvdata.expectancy[i];\n      }\n    }\n\n    data = [...data].sort((a, b) => b.expectancy - a.expectancy);\n    horizontal(data, min, max); // draw(data);\n  }, [csvdata]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      style: {\n        width: \"500px\",\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DensityPlot, \"wHGsJvYloKVvWo8EGgYwue3juQs=\");\n\n_c = DensityPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"DensityPlot\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/DensityPlot.js"],"names":["React","useEffect","useRef","d3","DensityPlot","csvdata","svgRef","wrapperRef","clearBoard","accessToRef","select","current","selectAll","remove","kernelDensityEstimator","kernel","X","V","map","x","mean","v","kernelEpanechnikov","k","Math","abs","horizontal","data","min","max","margin","top","right","bottom","left","width","height","svg","attr","append","scaleLinear","domain","range","call","axisBottom","y","axisLeft","kde","ticks","density1","filter","d","type","value","density2","datum","line","curve","curveBasis","console","log","i","country","length","obj","expectancy","push","sort","a","b"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from \"d3\";\n\nexport function DensityPlot({csvdata}){\n\n    const svgRef = useRef();\n    const wrapperRef = useRef();\n\n    const clearBoard=()=>{\n        const accessToRef = d3.select(svgRef.current)\n        accessToRef.selectAll(\"svg > *\").remove();\n    }\n\n    // Function to compute density\n    function kernelDensityEstimator(kernel, X) {\n        return function(V) {\n        return X.map(function(x) {\n            return [x, d3.mean(V, function(v) { return kernel(x - v); })];\n        });\n        };\n    }\n    function kernelEpanechnikov(k) {\n        return function(v) {\n        return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\n        };\n    }\n\n    const horizontal = (data,min,max) => {\n\n\n        // D3 code here\n        var margin = {top: 20, right: 30, bottom: 40, left: 90},\n            width = 460 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(svgRef.current)\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // add the x Axis\n        var x = d3.scaleLinear()\n            .domain([0, 1000])\n            .range([0, width]);\n            svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n\n        // add the y Axis\n        var y = d3.scaleLinear()\n            .range([height, 0])\n            .domain([0, 0.01]);\n            svg.append(\"g\")\n            .call(d3.axisLeft(y));\n\n        // Compute kernel density estimation\n        var kde = kernelDensityEstimator(kernelEpanechnikov(7), x.ticks(60))\n        var density1 =  kde( data\n            .filter( function(d){return d.type === \"variable 1\"} )\n            .map(function(d){  return d.value; }) )\n        var density2 =  kde( data\n            .filter( function(d){return d.type === \"variable 2\"} )\n            .map(function(d){  return d.value; }) )\n\n        // Plot the area\n            svg.append(\"path\")\n                .attr(\"class\", \"mypath\")\n                .datum(density1)\n                .attr(\"fill\", \"#69b3a2\")\n                .attr(\"opacity\", \".6\")\n                .attr(\"stroke\", \"#000\")\n                .attr(\"stroke-width\", 1)\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"d\",  d3.line()\n                        .curve(d3.curveBasis)\n                            .x(function(d) { return x(d[0]); })\n                            .y(function(d) { return y(d[1]); })\n                );\n\n            // Plot the area\n            svg.append(\"path\")\n            .attr(\"class\", \"mypath\")\n            .datum(density2)\n            .attr(\"fill\", \"#404080\")\n            .attr(\"opacity\", \".6\")\n            .attr(\"stroke\", \"#000\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"d\",  d3.line()\n                    .curve(d3.curveBasis)\n                        .x(function(d) { return x(d[0]); })\n                        .y(function(d) { return y(d[1]); })\n            );\n\n\n\n\n      \n    }\n\n    \n\n    useEffect(()=>{\n        console.log(\"here\")\n        clearBoard();\n        let data = []\n        for(var i=0;i<csvdata.country.length;i++){\n            let obj = {};\n            obj.country = csvdata.country[i];\n            obj.expectancy = csvdata.expectancy[i];\n            data.push(obj);\n        }\n\n        var min=100000\n         var max = -100000\n         \n         for(var i=0;i<csvdata.expectancy.length;i++){\n             if(csvdata.expectancy[i]<min){\n                 min = csvdata.expectancy[i];\n             }\n             if(csvdata.expectancy[i]>min){\n                 max = csvdata.expectancy[i];\n             }\n         }\n\n        data = [...data].sort((a,b)=>b.expectancy - a.expectancy)\n        horizontal(data,min,max);\n        // draw(data);\n        \n    },[csvdata])\n    \n    return (\n        <div ref={wrapperRef}>\n          <svg ref={svgRef} style={{width:\"500px\",height:\"400px\"}}>\n          </svg>\n        </div>\n      );\n}"]},"metadata":{},"sourceType":"module"}