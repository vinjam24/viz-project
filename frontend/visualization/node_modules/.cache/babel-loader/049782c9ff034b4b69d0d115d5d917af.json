{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js\",\n    _s = $RefreshSig$();\n\nimport { geoMercator, geoPath } from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\nimport { select } from \"d3\"; // import useResizeObserver from \"./useResizeObserver\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart({\n  data,\n  property,\n  csvdata\n}) {\n  _s();\n\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  console.log(\"data\", data.features[0]);\n  useEffect(() => {\n    // const accessToRef = select(svgRef.current);\n    const width = 800;\n    const height = 550;\n    const projection = geoMercator().fitSize([width, height], data);\n    const pathGenerator = geoPath().projection(projection); // accessToRef.selectAll(\".country\")\n    // .data(data.features)\n    // .append(\"path\")\n    // .attr(\"class\", \"country\")\n    // .attr(\"d\", feature => pathGenerator(feature));\n\n    const accessToRef = select(svgRef.current).attr(\"height\", height).attr(\"width\", width).style(\"background-color\", \"red\"); // .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n\n    accessToRef.selectAll(\".country\").data(data.features).enter().append('path').attr('class', 'country').attr('d', feature => {\n      return pathGenerator(feature);\n    });\n  }, [data, property]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoChart, \"wHGsJvYloKVvWo8EGgYwue3juQs=\");\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js"],"names":["geoMercator","geoPath","React","useEffect","useRef","select","GeoChart","data","property","csvdata","svgRef","wrapperRef","console","log","features","width","height","projection","fitSize","pathGenerator","accessToRef","current","attr","style","selectAll","enter","append","feature","marginBottom"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,IAArC;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAAQC,MAAR,QAAqB,IAArB,C,CAEA;;;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA,IAAD;AAAMC,EAAAA,QAAN;AAAeC,EAAAA;AAAf,CAAlB,EAA0C;AAAA;;AAGtC,QAAMC,MAAM,GAAGN,MAAM,CAAC,IAAD,CAArB;AACA,QAAMO,UAAU,GAAGP,MAAM,EAAzB;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBN,IAAI,CAACO,QAAL,CAAc,CAAd,CAAnB;AAEAX,EAAAA,SAAS,CAAC,MAAI;AAEV;AACA,UAAMY,KAAK,GAAC,GAAZ;AACA,UAAMC,MAAM,GAAG,GAAf;AAEA,UAAMC,UAAU,GAAGjB,WAAW,GAAGkB,OAAd,CAAsB,CAACH,KAAD,EAAOC,MAAP,CAAtB,EAAqCT,IAArC,CAAnB;AAEA,UAAMY,aAAa,GAAGlB,OAAO,GAAGgB,UAAV,CAAqBA,UAArB,CAAtB,CARU,CAUV;AACA;AACA;AACA;AACA;;AACA,UAAMG,WAAW,GAAGf,MAAM,CAACK,MAAM,CAACW,OAAR,CAAN,CACSC,IADT,CACc,QADd,EACuBN,MADvB,EAESM,IAFT,CAEc,OAFd,EAEsBP,KAFtB,EAGSQ,KAHT,CAGe,kBAHf,EAGkC,KAHlC,CAApB,CAfU,CAmBkB;;AAC5BH,IAAAA,WAAW,CAACI,SAAZ,CAAsB,UAAtB,EACajB,IADb,CACkBA,IAAI,CAACO,QADvB,EAEaW,KAFb,GAGiBC,MAHjB,CAGwB,MAHxB,EAIiBJ,IAJjB,CAIsB,OAJtB,EAI8B,SAJ9B,EAKiBA,IALjB,CAKsB,GALtB,EAK2BK,OAAO,IAAG;AACjB,aAAOR,aAAa,CAACQ,OAAD,CAApB;AACH,KAPjB;AAUH,GA9BQ,EA8BP,CAACpB,IAAD,EAAMC,QAAN,CA9BO,CAAT;AAiCA,sBACI;AAAK,IAAA,GAAG,EAAEG,UAAV;AAAsB,IAAA,KAAK,EAAE;AAAEiB,MAAAA,YAAY,EAAE;AAAhB,KAA7B;AAAA,2BACE;AAAK,MAAA,GAAG,EAAElB;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA/CQJ,Q;;KAAAA,Q;AAkDT,eAAeA,QAAf","sourcesContent":["import { geoMercator, geoPath } from \"d3\";\nimport React,{ useEffect, useRef } from \"react\";\nimport {select} from \"d3\";\n\n// import useResizeObserver from \"./useResizeObserver\";\n\nfunction GeoChart({data,property,csvdata}){\n    \n    \n    const svgRef = useRef(null);\n    const wrapperRef = useRef();\n\n    console.log(\"data\",data.features[0])\n\n    useEffect(()=>{\n    \n        // const accessToRef = select(svgRef.current);\n        const width=800;\n        const height = 550;\n\n        const projection = geoMercator().fitSize([width,height],data);\n\n        const pathGenerator = geoPath().projection(projection);\n\n        // accessToRef.selectAll(\".country\")\n        // .data(data.features)\n        // .append(\"path\")\n        // .attr(\"class\", \"country\")\n        // .attr(\"d\", feature => pathGenerator(feature));\n        const accessToRef = select(svgRef.current)\n                                    .attr(\"height\",height)\n                                    .attr(\"width\",width)\n                                    .style(\"background-color\",\"red\")\n                                    // .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n        accessToRef.selectAll(\".country\")\n                    .data(data.features)\n                    .enter()\n                        .append('path')\n                        .attr('class','country')\n                        .attr('d', feature=> {\n                            return pathGenerator(feature)\n                        })\n                    \n\n    },[data,property])\n\n\n    return (\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n          <svg ref={svgRef}></svg>\n        </div>\n      );\n\n}\n\n\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}