{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js\",\n    _s = $RefreshSig$();\n\nimport { geoMercator, geoPath, max } from \"d3\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { select, scaleLinear } from \"d3\"; // import useResizeObserver from \"./useResizeObserver\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart({\n  data,\n  csvdata,\n  country,\n  changeCountry\n}) {\n  _s();\n\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  const [selectedCountry, setSelectedCountry] = useState(country);\n  console.log(\"data\", data.features[0]);\n\n  const clearBoard = () => {\n    const accessToRef = select(svgRef.current);\n    accessToRef.selectAll(\"svg > *\").remove();\n  };\n\n  const draw = () => {\n    // const accessToRef = select(svgRef.current);\n    const width = 800;\n    const height = 450;\n    var min = 100000;\n    var max = -100000;\n\n    for (var i = 0; i < csvdata.expectancy.length; i++) {\n      if (csvdata.expectancy[i] < min) {\n        min = csvdata.expectancy[i];\n      }\n\n      if (csvdata.expectancy[i] > min) {\n        max = csvdata.expectancy[i];\n      }\n    }\n\n    var colorScale = scaleLinear().domain([min, max]).range(['#ffdacc', '#ff6b33']);\n    const projection = geoMercator().fitSize([width, height], data);\n    const pathGenerator = geoPath().projection(projection);\n    const tooltip = select('.tooltip'); // accessToRef.selectAll(\".country\")\n    // .data(data.features)\n    // .append(\"path\")\n    // .attr(\"class\", \"country\")\n    // .attr(\"d\", feature => pathGenerator(feature));\n\n    const accessToRef = select(svgRef.current).attr(\"height\", height).attr(\"width\", width).style(\"background-color\", \"#006699\"); // .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n\n    accessToRef.selectAll(\".country\").data(data.features).enter().append('path').attr('class', 'country').attr('d', feature => {\n      return pathGenerator(feature);\n    }).attr(\"fill\", feature => {\n      var req_name = feature.properties.name;\n      var index = -1;\n\n      for (var i = 0; i < csvdata.country.length; i++) {\n        if (csvdata.country[i] == req_name) {\n          console.log(\"yes\");\n          index = i;\n          break;\n        }\n      }\n\n      console.log(\"dele\", selectedCountry);\n      if (index == -1) return \"#ccc\";\n      if (req_name == selectedCountry) return \"blue\";\n      return colorScale(csvdata.expectancy[index]);\n    }).on('mouseover', feature => {\n      console.log(\"mouse over\", feature);\n      var req_name = feature.properties.name;\n      var index = -1;\n\n      for (var i = 0; i < csvdata.country.length; i++) {\n        if (csvdata.country[i] == req_name) {\n          console.log(\"yes\");\n          index = i;\n          break;\n        }\n      }\n\n      if (index != -1) {\n        return tooltip.style('opacity', 1).html(csvdata.expectancy[index]); // Replace with your desired tooltip content\n        // .style('left', `${event.pageX}px`)\n        // .style('top', `${event.pageY}px`);\n      }\n    }) // .on('mouseout', () => {\n    //     // Hide the tooltip when mouse leaves the country\n    //    return tooltip.style('opacity', 0);\n    //   })\n    .on('click', feature => {\n      console.log(\"event\", feature);\n      var req_name = feature.properties.name;\n\n      if (csvdata.country.includes(req_name)) {\n        // Perform actions when a clickable country is clicked\n        setSelectedCountry(req_name);\n        changeCountry(req_name);\n      }\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"inside use effect\");\n    clearBoard();\n    draw();\n  }, [data, selectedCountry]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoChart, \"wzRGkn893FzCsMMnGV4u4fJwWI0=\");\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js"],"names":["geoMercator","geoPath","max","React","useEffect","useRef","useState","select","scaleLinear","GeoChart","data","csvdata","country","changeCountry","svgRef","wrapperRef","selectedCountry","setSelectedCountry","console","log","features","clearBoard","accessToRef","current","selectAll","remove","draw","width","height","min","i","expectancy","length","colorScale","domain","range","projection","fitSize","pathGenerator","tooltip","attr","style","enter","append","feature","req_name","properties","name","index","on","html","includes","marginBottom"],"mappings":"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","sourcesContent":["import { geoMercator, geoPath, max } from \"d3\";\nimport React,{ useEffect, useRef, useState } from \"react\";\nimport {select,scaleLinear} from \"d3\";\n\n// import useResizeObserver from \"./useResizeObserver\";\n\nfunction GeoChart({data,csvdata,country,changeCountry}){\n    \n    \n    const svgRef = useRef(null);\n    const wrapperRef = useRef();\n\n    const [selectedCountry,setSelectedCountry] = useState(country);\n\n    console.log(\"data\",data.features[0])\n\n    const clearBoard=()=>{\n        const accessToRef = select(svgRef.current)\n        accessToRef.selectAll(\"svg > *\").remove();\n    }\n\n    const draw = ()=>{\n\n         // const accessToRef = select(svgRef.current);\n         const width=800;\n         const height = 450;\n \n         var min=100000\n         var max = -100000\n         \n         for(var i=0;i<csvdata.expectancy.length;i++){\n             if(csvdata.expectancy[i]<min){\n                 min = csvdata.expectancy[i];\n             }\n             if(csvdata.expectancy[i]>min){\n                 max = csvdata.expectancy[i];\n             }\n         }\n \n        var colorScale = scaleLinear().domain([min,max]).range(['#ffdacc','#ff6b33'])\n \n         const projection = geoMercator().fitSize([width,height],data);\n \n         const pathGenerator = geoPath().projection(projection);\n \n         const tooltip = select('.tooltip');\n \n         // accessToRef.selectAll(\".country\")\n         // .data(data.features)\n         // .append(\"path\")\n         // .attr(\"class\", \"country\")\n         // .attr(\"d\", feature => pathGenerator(feature));\n         const accessToRef = select(svgRef.current)\n                                     .attr(\"height\",height)\n                                     .attr(\"width\",width)\n                                     .style(\"background-color\",\"#006699\")\n                                     // .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n         accessToRef.selectAll(\".country\")\n                     .data(data.features)\n                     .enter()\n                         .append('path')\n                         .attr('class','country')\n                         .attr('d', feature=> {\n                             return pathGenerator(feature)\n                         })\n                         .attr(\"fill\",feature => {\n                             var req_name = feature.properties.name;\n                             var index = -1;\n                             for(var i=0;i<csvdata.country.length;i++){\n                                 if(csvdata.country[i]==req_name){\n                                     console.log(\"yes\");\n                                     index = i;\n                                     break;\n                                 }\n                             }\n                             console.log(\"dele\",selectedCountry)\n                             if(index==-1)return \"#ccc\";\n                             if(req_name==selectedCountry)return \"blue\";\n                             \n                             return colorScale(csvdata.expectancy[index])\n                         })\n                         .on('mouseover',(feature) =>{\n                 \n                             console.log(\"mouse over\",feature)\n                             var req_name = feature.properties.name;\n                             var index = -1;\n                             for(var i=0;i<csvdata.country.length;i++){\n                                 if(csvdata.country[i]==req_name){\n                                     console.log(\"yes\");\n                                     index = i;\n                                     break;\n                                 }\n                             }\n                             if(index!=-1){\n                                return tooltip\n                                 .style('opacity', 1)\n                                 .html(csvdata.expectancy[index]) // Replace with your desired tooltip content\n                                 // .style('left', `${event.pageX}px`)\n                                 // .style('top', `${event.pageY}px`);\n                             }\n                             \n                         })\n                         // .on('mouseout', () => {\n                         //     // Hide the tooltip when mouse leaves the country\n                         //    return tooltip.style('opacity', 0);\n                         //   })\n                           .on('click', (feature) => {\n                             console.log(\"event\",feature)\n                             var req_name = feature.properties.name;\n                             if (csvdata.country.includes(req_name)) {\n                               // Perform actions when a clickable country is clicked\n                               \n                                setSelectedCountry(req_name);\n                                changeCountry(req_name);\n                               \n                              \n                             }\n                         });\n\n    }\n\n    useEffect(()=>{\n\n        console.log(\"inside use effect\");\n        clearBoard();\n        draw();   \n\n    },[data,selectedCountry])\n\n\n    return (\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n          <svg ref={svgRef}></svg>\n        </div>\n      );\n\n}\n\n\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}