{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/DensityPlot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DensityPlot({\n  csvdata\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n\n  const clearBoard = () => {\n    const accessToRef = d3.select(svgRef.current);\n    accessToRef.selectAll(\"svg > *\").remove();\n  }; // Function to calculate the kernel density estimate\n\n\n  function kernelDensityEstimator(kernel, x) {\n    return function (sample) {\n      return x.map(x => [x, d3.mean(sample, v => kernel(x - v))]);\n    };\n  } // Epanechnikov kernel function\n\n\n  function kernelEpanechnikov(k) {\n    return function (v) {\n      return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\n    };\n  }\n\n  const draw = (data1, data2) => {\n    // D3 code here\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 90\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(svgRef.current).attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // add the x Axis\n\n    const x = d3.scaleLinear().domain([d3.min(data1), d3.max(data2)]).range([0, width]); // Generate the kernel density estimate\n\n    const kde = kernelDensityEstimator(kernelEpanechnikov(7), x.ticks(40));\n    const density1 = kde(data1);\n    const density2 = kde(data2); // Set up the y-scale\n\n    const y = d3.scaleLinear().domain([0, d3.max(density1, d => d[1])]).range([height, 0]); // Define the area generator\n\n    const area = d3.area().x(d => x(d[0])).y0(innerHeight).y1(d => y(d[1])); // Draw the density plot\n\n    g.append(\"path\").datum(density).attr(\"fill\", \"steelblue\").attr(\"d\", area); // Add the x-axis\n\n    g.append(\"g\").attr(\"transform\", `translate(0, ${innerHeight})`).call(d3.axisBottom(x)); // Add the y-axis\n\n    g.append(\"g\").call(d3.axisLeft(y));\n  };\n\n  useEffect(() => {\n    let tmpData1 = [];\n    let tmpData2 = [];\n    axios.get('http://localhost:8000/pcp').then(repos => {\n      const allRepos = repos.data;\n      let parsedResponse = JSON.parse(allRepos);\n      let tempState = parsedResponse;\n      console.log(\"data\", tempState);\n      tempState.forEach(ele => {\n        // let obj1 = {};\n        // obj1.alcohol = ele.Alcohol;\n        // obj1.expectancy = ele['Life Expectancy'];\n        // let obj2 = {}\n        // obj2.expenditure = ele['Total expenditure'];\n        // obj2.expectancy = ele['Life Expectancy'];\n        tmpData1.push(ele['Alcohol']);\n        tmpData2.push(ele['Total Expenditure']);\n      });\n      clearBoard();\n      draw(tmpData1, tmpData2);\n    }); // draw(data);\n  }, [csvdata]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      style: {\n        width: \"500px\",\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DensityPlot, \"wHGsJvYloKVvWo8EGgYwue3juQs=\");\n\n_c = DensityPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"DensityPlot\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/DensityPlot.js"],"names":["React","useEffect","useRef","d3","axios","DensityPlot","csvdata","svgRef","wrapperRef","clearBoard","accessToRef","select","current","selectAll","remove","kernelDensityEstimator","kernel","x","sample","map","mean","v","kernelEpanechnikov","k","Math","abs","draw","data1","data2","margin","top","right","bottom","left","width","height","svg","attr","append","scaleLinear","domain","min","max","range","kde","ticks","density1","density2","y","d","area","y0","innerHeight","y1","g","datum","density","call","axisBottom","axisLeft","tmpData1","tmpData2","get","then","repos","allRepos","data","parsedResponse","JSON","parse","tempState","console","log","forEach","ele","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from \"d3\";\nimport axios from 'axios';\n\nexport function DensityPlot({csvdata}){\n\n    const svgRef = useRef();\n    const wrapperRef = useRef();\n\n    const clearBoard=()=>{\n        const accessToRef = d3.select(svgRef.current)\n        accessToRef.selectAll(\"svg > *\").remove();\n    }\n\n    // Function to calculate the kernel density estimate\n    function kernelDensityEstimator(kernel, x) {\n        return function (sample) {\n        return x.map((x) => [\n            x,\n            d3.mean(sample, (v) => kernel(x - v)),\n        ]);\n        };\n    }\n    \n    // Epanechnikov kernel function\n    function kernelEpanechnikov(k) {\n        return function (v) {\n        return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\n        };\n    }\n\n    const draw= (data1,data2) => {\n\n\n        // D3 code here\n        var margin = {top: 20, right: 30, bottom: 40, left: 90},\n            width = 460 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(svgRef.current)\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // add the x Axis\n        const x = d3.scaleLinear()\n                .domain([d3.min(data1), d3.max(data2)])\n                .range([0, width]);\n\n        // Generate the kernel density estimate\n        const kde = kernelDensityEstimator(kernelEpanechnikov(7), x.ticks(40));\n        const density1 = kde(data1);\n        const density2 = kde(data2);\n\n        // Set up the y-scale\n        const y = d3.scaleLinear()\n        .domain([0, d3.max(density1, (d) => d[1])])\n        .range([height, 0]);\n\n        // Define the area generator\n        const area = d3.area()\n        .x((d) => x(d[0]))\n        .y0(innerHeight)\n        .y1((d) => y(d[1]));\n\n\n\n        // Draw the density plot\n        g.append(\"path\")\n        .datum(density)\n        .attr(\"fill\", \"steelblue\")\n        .attr(\"d\", area);\n\n        // Add the x-axis\n        g.append(\"g\")\n        .attr(\"transform\", `translate(0, ${innerHeight})`)\n        .call(d3.axisBottom(x));\n\n        // Add the y-axis\n        g.append(\"g\")\n        .call(d3.axisLeft(y));\n\n\n\n      \n    }\n\n    \n\n    useEffect(()=>{\n       \n        let tmpData1 = []\n        let tmpData2 = []\n        axios.get('http://localhost:8000/pcp').then((repos) => {\n                const allRepos = repos.data;\n                let parsedResponse = JSON.parse(allRepos);\n                let tempState = parsedResponse;\n                console.log(\"data\",tempState)\n                tempState.forEach(ele => {\n                    // let obj1 = {};\n                    // obj1.alcohol = ele.Alcohol;\n                    // obj1.expectancy = ele['Life Expectancy'];\n\n                    // let obj2 = {}\n                    // obj2.expenditure = ele['Total expenditure'];\n                    // obj2.expectancy = ele['Life Expectancy'];\n                    tmpData1.push(ele['Alcohol']);\n                    tmpData2.push(ele['Total Expenditure']);\n                });\n                clearBoard();\n                draw(tmpData1,tmpData2);\n            });\n\n        // draw(data);\n        \n    },[csvdata])\n    \n    return (\n        <div ref={wrapperRef}>\n          <svg ref={svgRef} style={{width:\"500px\",height:\"400px\"}}>\n          </svg>\n        </div>\n      );\n}"]},"metadata":{},"sourceType":"module"}