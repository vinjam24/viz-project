{"ast":null,"code":"var _jsxFileName = \"/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js\",\n    _s = $RefreshSig$();\n\nimport { geoMercator, geoPath } from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\nimport { select } from \"d3\"; // import useResizeObserver from \"./useResizeObserver\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  _s();\n\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  console.log(\"data\", data.features[0]);\n  useEffect(() => {\n    const accessToRef = select(svgRef.current);\n    const width = 300;\n    const height = 150;\n    const projection = geoMercator().fitSize([width, height]);\n    const pathGenerator = geoPath().projection(projection); // accessToRef.selectAll(\".country\")\n    // .data(data.features)\n    // .append(\"path\")\n    // .attr(\"class\", \"country\")\n    // .attr(\"d\", feature => pathGenerator(feature));\n\n    accessToRef = d3.select(scatterRef.current).attr(\"height\", height).attr(\"width\", width).style(\"background-color\", \"#f5f5f5\").append(\"g\").attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n  }, [data, property]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: [\"Hello\", /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeoChart, \"wHGsJvYloKVvWo8EGgYwue3juQs=\");\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["/Users/deepika/Documents/Visualization_D3_React_JS/Lab2/frontend/visualization/src/components/GeoChart.js"],"names":["geoMercator","geoPath","React","useEffect","useRef","select","GeoChart","data","property","svgRef","wrapperRef","console","log","features","accessToRef","current","width","height","projection","fitSize","pathGenerator","d3","scatterRef","attr","style","append","margin_left","margin_top","marginBottom"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,IAArC;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAAQC,MAAR,QAAqB,IAArB,C,CAEA;;;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAAlB,EAAkC;AAAA;;AAG9B,QAAMC,MAAM,GAAGL,MAAM,CAAC,IAAD,CAArB;AACA,QAAMM,UAAU,GAAGN,MAAM,EAAzB;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBL,IAAI,CAACM,QAAL,CAAc,CAAd,CAAnB;AAEAV,EAAAA,SAAS,CAAC,MAAI;AAEV,UAAMW,WAAW,GAAGT,MAAM,CAACI,MAAM,CAACM,OAAR,CAA1B;AACA,UAAMC,KAAK,GAAC,GAAZ;AACA,UAAMC,MAAM,GAAG,GAAf;AAEA,UAAMC,UAAU,GAAGlB,WAAW,GAAGmB,OAAd,CAAsB,CAACH,KAAD,EAAOC,MAAP,CAAtB,CAAnB;AAEA,UAAMG,aAAa,GAAGnB,OAAO,GAAGiB,UAAV,CAAqBA,UAArB,CAAtB,CARU,CAUV;AACA;AACA;AACA;AACA;;AACAJ,IAAAA,WAAW,GAAGO,EAAE,CAAChB,MAAH,CAAUiB,UAAU,CAACP,OAArB,EACeQ,IADf,CACoB,QADpB,EAC6BN,MAD7B,EAEeM,IAFf,CAEoB,OAFpB,EAE4BP,KAF5B,EAGeQ,KAHf,CAGqB,kBAHrB,EAGwC,SAHxC,EAIeC,MAJf,CAIsB,GAJtB,EAKeF,IALf,CAKoB,WALpB,EAKiC,eAAeG,WAAf,GAA6B,GAA7B,GAAmCC,UAAnC,GAAgD,GALjF,CAAd;AAOH,GAtBQ,EAsBP,CAACpB,IAAD,EAAMC,QAAN,CAtBO,CAAT;AAyBA,sBACI;AAAK,IAAA,GAAG,EAAEE,UAAV;AAAsB,IAAA,KAAK,EAAE;AAAEkB,MAAAA,YAAY,EAAE;AAAhB,KAA7B;AAAA,qCAEE;AAAK,MAAA,GAAG,EAAEnB;AAAV;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAxCQH,Q;;KAAAA,Q;AA2CT,eAAeA,QAAf","sourcesContent":["import { geoMercator, geoPath } from \"d3\";\nimport React,{ useEffect, useRef } from \"react\";\nimport {select} from \"d3\";\n\n// import useResizeObserver from \"./useResizeObserver\";\n\nfunction GeoChart({data,property}){\n    \n    \n    const svgRef = useRef(null);\n    const wrapperRef = useRef();\n\n    console.log(\"data\",data.features[0])\n\n    useEffect(()=>{\n    \n        const accessToRef = select(svgRef.current);\n        const width=300;\n        const height = 150;\n\n        const projection = geoMercator().fitSize([width,height]);\n\n        const pathGenerator = geoPath().projection(projection);\n\n        // accessToRef.selectAll(\".country\")\n        // .data(data.features)\n        // .append(\"path\")\n        // .attr(\"class\", \"country\")\n        // .attr(\"d\", feature => pathGenerator(feature));\n        accessToRef = d3.select(scatterRef.current)\n                                    .attr(\"height\",height)\n                                    .attr(\"width\",width)\n                                    .style(\"background-color\",\"#f5f5f5\")\n                                    .append(\"g\")\n                                    .attr(\"transform\", \"translate(\" + margin_left + \",\" + margin_top + \")\");\n\n    },[data,property])\n\n\n    return (\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n            Hello\n          <svg ref={svgRef}></svg>\n        </div>\n      );\n\n}\n\n\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}